
function createPartItems() -- testing only!
  TestMaterials = 
    {
      "wood",
      "stone",
      "copper",
      "iron",
      "steel",
      "ruby"
    }
  -- setup
  local basePartItem = {
    type = "item",
    name = "FP-",
    icon = "__DyTech-Tools__/graphics/icons/",
    flags = {"goes-to-main-inventory"},
    subgroup = "dytechinter",
    order = "FP-[",
    stack_size = 200,
    modularInfo = {
      handle = true, --if it can be a handle!
      rod = true, --if it can be a rod!
      head = true, --if it can be a head!
      durability = 1000, --the main durability before it is modified. only applies when used as head!
      mininglevel = 1, --main damage value (aka mining level) before modifiers!
      miningspeed = 1, --main speed value before modifiers!
      strength = 1,    --mining level*0.4 (reduction)(when used as head)
                  --durability*0.4 (reduction)(when used as rod)
      hold = 1, --mining speed*0.4 (reduction)
      flexibility = 2, --both mining level and speed *0.6 (reduction)
      -- if a modifier isnt here, its of no use for this material!
      -- so when using an all wooden tool. there are the stats:
      -- damage value(mining level): 1*0.4*0.6 = 0.24
      -- durability: 1000*0.4 = 400
      -- mining speed: 1*0.4*0.6 = 0.24
    }
  }
  
  -- create each item
  for index, name in ipairs(TestMaterials) do
    local newPart = util.table.deepcopy(basePartItem)
    newPart.name = basePartItem.name .. name .. "-"
    newPart.icon = basePartItem.icon .. name .. ".png"
    newPart.order = basePartItem.order .. name
    
    if orderSuffix then newPart.order = newPart.order .. "-" end
    newPart.modularInfo.durability = newPart.modularInfo.durability * index
    if name == "ruby" then
      newPart.modularInfo.rod = false
      newPart.modularInfo.handle = false
      newPart.modularInfo.mininglevel = 1000
      newPart.modularInfo.miningspeed = 1000
    end
    if name == "steel" then
      newPart.modularInfo.mininglevel = 1000
      newPart.modularInfo.miningspeed = 1000
    end
    -- changes name, returns new name
    -- perhaps having a table of old (simple) to new name
    -- would be useful in not having to know what the 
    -- new name is when creating prototypes...
    appendModularInfo(newPart)
    data:extend({newPart})
  end
end
